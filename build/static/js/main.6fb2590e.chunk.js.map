{"version":3,"sources":["App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/corona-banner.jpg","components/Cards/Cards.module.css","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","App.js","index.js"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","updated","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","console","log","getAsList","keys","objectPropertiesList","map","key","date","fetchDailySummary","Object","countries","response","countriesList","item","Charts","useState","summary","setSummary","useEffect","dailyData","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","formControl","NativeSelect","defaulValue","onChange","e","target","value","i","Cards","Grid","spacing","justify","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","App","state","fetchCountryData","setState","this","image","alt","src","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fb2590e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1-Is7\",\"image\":\"App_image__3Pa4h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1UYr1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3S0Wh\"};","module.exports = __webpack_public_path__ + \"static/media/corona-banner.49e7e4df.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__7U8Al\",\"card\":\"Cards_card__kypOF\",\"infected\":\"Cards_infected__wdDXW\",\"recovered\":\"Cards_recovered__22fTv\",\"deaths\":\"Cards_deaths__1GQGU\"};","import axios from 'axios';\r\n\r\nconst url = 'https://disease.sh/v3/covid-19'\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    } else {\r\n        changeableUrl = `${url}/all`\r\n    }\r\n      try {\r\n        const { data: { updated, cases, todayCases, deaths, todayDeaths, recovered, todayRecovered } } = await axios.get(`${changeableUrl}`);\r\n        return { updated, cases, todayCases, deaths, todayDeaths, recovered, todayRecovered };\r\n    }\r\n    catch (error) {\r\n        console.log(error)\r\n    }\r\n};\r\n\r\nconst getAsList = (keys, data) => {\r\n    const objectPropertiesList = keys.map(key => {\r\n        return {\r\n            date: key,\r\n            cases: data.cases[key],\r\n            deaths: data.deaths[key],\r\n            recovered: data.recovered[key]\r\n        };\r\n    });\r\n    console.log(objectPropertiesList)\r\n    return objectPropertiesList;\r\n}\r\n\r\nexport const fetchDailySummary = async () => {\r\n    const { data } = await axios.get(`${url}/historical/all`)\r\n\r\n    return getAsList(Object.keys(data.cases), data);\r\n}\r\n\r\nexport const countries = async () => {\r\n    try {\r\n        const response = await axios.get(`${url}/countries`)\r\n        const countriesList = (response.data).map((item) => item.country)\r\n\r\n        return countriesList;\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport styles from './Charts.module.css'\r\nimport { fetchDailySummary } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\n\r\nconst Charts = ({ data: { cases, deaths, recovered }, country }) => {\r\n    const [summary, setSummary] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            const dailyData = await fetchDailySummary()\r\n            setSummary(dailyData);\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n    const lineChart = (\r\n        summary[1] ? (\r\n            <Line\r\n                data={{\r\n                    labels: summary.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: summary.map(({ cases }) => cases),\r\n                        label: 'Confirmed cases',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n                    }, {\r\n                        data: summary.map(({ deaths }) => deaths),\r\n                        label: 'Confirmed deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n                        fill: true,\r\n                    }]\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        cases ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Cases', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        data: [cases, recovered, deaths]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current country ${country}` }\r\n                }} />\r\n        ) : null\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts;","import React, { useEffect, useState } from 'react';\r\nimport styles from './CountryPicker.module.css'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\nimport { countries } from '../../api'\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountries = async () => {\r\n            setFetchedCountries(await countries());\r\n        };\r\n        fetchCountries();\r\n    }, [])\r\n    console.log(fetchedCountries)\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaulValue={''} onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=''>Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport styles from './Cards.module.css';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\nconst Cards = ({ data: { updated, cases, todayCases, deaths, todayDeaths, recovered, todayRecovered } }) => {\r\n    if (!updated) {\r\n        return 'Loading..'\r\n    }\r\n    console.log(cases, 'from cards')\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Cases\r\n                        </Typography>\r\n                        <Typography variant='h5' component='h2'>\r\n                            <CountUp start={0} end={cases} duration={2.75} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography>Cases today:</Typography>\r\n                        <Typography gutterBottom><CountUp start={0} end={todayCases} duration={2.75}></CountUp></Typography>\r\n                        <Typography>{new Date(updated).toDateString()}</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant='h5' component='h2'>\r\n                            <CountUp start={0} end={deaths} duration={2.75} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography>Deaths today:</Typography>\r\n                        <Typography><CountUp start={0} end={todayDeaths} duration={2.75}></CountUp></Typography>\r\n                        <Typography>{new Date(updated).toDateString()}</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant='h5' component='h2'>\r\n                            <CountUp start={0} end={recovered} duration={2.75} separator=\",\"></CountUp>\r\n                        </Typography>\r\n                        <Typography>Recovered today:</Typography>\r\n                        <Typography><CountUp start={0} end={todayRecovered} duration={2.75}></CountUp></Typography>\r\n                        <Typography>{new Date(updated).toDateString()}</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport { Cards, Charts, CountryPicker } from './components'\r\nimport styles from './App.module.css'\r\nimport { fetchData } from './api'\r\nimport { render } from '@testing-library/react';\r\nimport image from './images/corona-banner.jpg'\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    };\r\n    async componentDidMount() {\r\n        const data = await fetchData();\r\n        this.setState({ data });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchCountryData = await fetchData(country);\r\n        this.setState({ data: fetchCountryData, country: country });\r\n\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} alt='COVID-19' src={image}></img>\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Charts data={data} country={country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}